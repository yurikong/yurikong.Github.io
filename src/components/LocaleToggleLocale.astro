---
import countryCodeToFlagEmoji from "country-code-to-flag-emoji"
import { type TLocale, defaultLocale, parseLocale, nextLocaleOf } from "~/i18n"
import AppLink from "./AppLink.astro"
import { getRelativeLocaleUrl } from "astro:i18n"

interface Props {
  class?: string
}
const { class: className } = Astro.props

const currentLocale: TLocale = parseLocale(Astro.currentLocale ?? defaultLocale)
const nextLocale: TLocale | undefined = nextLocaleOf(currentLocale)
const titleDisplayTextMap: Record<TLocale, string> = {
  en: "Change Language",
  zh: "切换语言",
}
const currentHref: string = Astro.url.href
const href: string = currentHref.endsWith("/") ? currentHref.substring(0, currentHref.length - 1) : currentHref
const tokens: string[] = href.split("/")
const localeTokenIndex: number = tokens.findIndex((it) => it === currentLocale)
const urlTokens: string[] = localeTokenIndex >= 0 ? tokens.slice(localeTokenIndex + 1) : []
---

{
  nextLocale && (
    <locale-toggle-locale class:list={["cursor-pointer", "flex", className]}>
      <AppLink
        class:list={["flex", "leading-none"]}
        url={getRelativeLocaleUrl(nextLocale, urlTokens.join("/"))}
        title={titleDisplayTextMap[currentLocale]}
      >
        {countryCodeToFlagEmoji(currentLocale)}
      </AppLink>
    </locale-toggle-locale>
  )
}

<script>
  import { type TLocale, parseLocale, nextLocaleOf, setLocale } from "~/i18n"

  class LocaleToggleLocale extends HTMLElement {
    /**
     * Click handler.
     */
    private handleClick(): void {
      const currentLocale: TLocale = parseLocale(document.documentElement.lang)
      const nextLocale: TLocale | undefined = nextLocaleOf(currentLocale)
      if (nextLocale) {
        setLocale(nextLocale)
      }
    }

    connectedCallback(): void {
      this.addEventListener("click", this.handleClick)
    }

    disconnectedCallback(): void {
      this.removeEventListener("click", this.handleClick)
    }
  }

  customElements.define("locale-toggle-locale", LocaleToggleLocale)
</script>
